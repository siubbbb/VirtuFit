/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for user profiles and associated data
 * (body measurements, avatars, and fit recommendations).
 * Garments and size charts are publicly readable but only writable by authorized users (TODO).
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/bodyMeasurements/{bodyMeasurementId}: Body measurements for a specific user.
 * - /users/{userId}/avatars/{avatarId}: Avatars for a specific user.
 * - /users/{userId}/fitRecommendations/{fitRecommendationId}: Fit recommendations for a specific user.
 * - /garments/{garmentId}: Garment information.
 * - /sizeCharts/{sizeChartId}: Size chart information.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Listing of user subcollections is allowed only for the owning user.
 * - Garments and SizeCharts are publicly readable.
 * - Write access to garments and size charts is currently not defined and marked with TODO.
 *
 * Denormalization for Authorization:
 * - The `userId` is denormalized into the BodyMeasurement, Avatar, and FitRecommendation documents
 *   to ensure authorization independence. This prevents the need for `get()` calls in security
 *   rules to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @allow (get) User 'user123' can read their profile.
     * @deny (get) User 'user456' cannot read 'user123's profile.
     * @allow (update) User 'user123' can update their profile.
     * @deny (update) User 'user456' cannot update 'user123's profile.
     * @allow (delete) User 'user123' can delete their profile.
     * @deny (delete) User 'user456' cannot delete 'user123's profile.
     * @principle Enforces document ownership for writes, restricts read access to the owner.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to body measurements for a specific user.
     * @path /users/{userId}/bodyMeasurements/{bodyMeasurementId}
     * @allow (create) User 'user123' can create a body measurement record for themselves.
     * @deny (create) User 'user456' cannot create a body measurement record for 'user123'.
     * @allow (get) User 'user123' can read their own body measurement record.
     * @deny (get) User 'user456' cannot read 'user123's body measurement record.
     * @allow (update) User 'user123' can update their body measurement record.
     * @deny (update) User 'user456' cannot update 'user123's body measurement record.
     * @allow (delete) User 'user123' can delete their own body measurement record.
     * @deny (delete) User 'user456' cannot delete 'user123's body measurement record.
     * @principle Enforces document ownership for writes, restricts read access to the owner.
     */
    match /users/{userId}/bodyMeasurements/{bodyMeasurementId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to avatars for a specific user.
     * @path /users/{userId}/avatars/{avatarId}
     * @allow (create) User 'user123' can create an avatar for themselves.
     * @deny (create) User 'user456' cannot create an avatar for 'user123'.
     * @allow (get) User 'user123' can read their own avatar.
     * @deny (get) User 'user456' cannot read 'user123's avatar.
     * @allow (update) User 'user123' can update their avatar.
     * @deny (update) User 'user456' cannot update 'user123's avatar.
     * @allow (delete) User 'user123' can delete their own avatar.
     * @deny (delete) User 'user456' cannot delete 'user123's avatar.
     * @principle Enforces document ownership for writes, restricts read access to the owner.
     */
    match /users/{userId}/avatars/{avatarId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to fit recommendations for a specific user.
     * @path /users/{userId}/fitRecommendations/{fitRecommendationId}
     * @allow (create) User 'user123' can create a fit recommendation for themselves.
     * @deny (create) User 'user456' cannot create a fit recommendation for 'user123'.
     * @allow (get) User 'user123' can read their own fit recommendation.
     * @deny (get) User 'user456' cannot read 'user123's fit recommendation.
     * @allow (update) User 'user123' can update their own fit recommendation.
     * @deny (update) User 'user456' cannot update 'user123's fit recommendation.
     * @allow (delete) User 'user123' can delete their own fit recommendation.
     * @deny (delete) User 'user456' cannot delete 'user123's fit recommendation.
     * @principle Enforces document ownership for writes, restricts read access to the owner.
     */
    match /users/{userId}/fitRecommendations/{fitRecommendationId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to garment information.
     * @path /garments/{garmentId}
     * @allow (get) Any user can read garment information.
     * @deny (create) No one can create garment information without specific authorization.
     * @deny (update) No one can update garment information without specific authorization.
     * @deny (delete) No one can delete garment information without specific authorization.
     * @principle Public read access, owner-only writes (TODO: Implement owner-only writes).
     */
    match /garments/{garmentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to size chart information.
     * @path /sizeCharts/{sizeChartId}
     * @allow (get) Any user can read size chart information.
     * @deny (create) No one can create size chart information without specific authorization.
     * @deny (update) No one can update size chart information without specific authorization.
     * @deny (delete) No one can delete size chart information without specific authorization.
     * @principle Public read access, owner-only writes (TODO: Implement owner-only writes).
     */
    match /sizeCharts/{sizeChartId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}