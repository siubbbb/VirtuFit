/**
 * @file Firestore Security Rules for VirtuFit Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles, body measurements, avatars, and virtual try-on sessions.
 *   Garments and size charts are globally readable.
 *
 * @data_structure
 *   - /users/{userId}: Stores user profile data.
 *   - /users/{userId}/bodyMeasurements/{bodyMeasurementId}: Stores body measurements for a user.
 *   - /users/{userId}/avatars/{avatarId}: Stores avatar data for a user.
 *   - /garments/{garmentId}: Stores garment information (globally readable).
 *   - /sizeCharts/{sizeChartId}: Stores size chart data (globally readable).
 *   - /users/{userId}/virtualTryOnSessions/{virtualTryOnSessionId}: Stores virtual try-on session data for a user.
 *
 * @key_security_decisions
 *   - User data is strictly segregated and accessible only to the owning user.
 *   - Garments and SizeCharts are globally readable.
 *   - Listing of user subcollections is allowed only to the owner.
 *
 * @denormalization_for_authorization
 *   - Each document under `/users/{userId}` implicitly inherits the `userId` for simplified ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can create their profile.
     * @allow (update) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can update their profile.
     * @allow (get) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can get their profile.
     * @deny (create) User with ID 'mismatchedId' cannot create a profile with userId 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2'.
     * @deny (update) User with ID 'mismatchedId' cannot update profile with userId 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to body measurement data for a specific user.
     * @path /users/{userId}/bodyMeasurements/{bodyMeasurementId}
     * @allow (create) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can create a body measurement.
     * @allow (update) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can update their body measurement.
     * @allow (get) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can get their body measurement.
     * @allow (list) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can list their body measurements.
     * @deny (create) User with ID 'mismatchedId' cannot create a body measurement with userId 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2'.
     * @deny (update) User with ID 'mismatchedId' cannot update body measurement with userId 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2'.
     * @principle Enforces document ownership for writes, and allows owner to list their own documents.
     */
    match /users/{userId}/bodyMeasurements/{bodyMeasurementId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to avatar data for a specific user.
     * @path /users/{userId}/avatars/{avatarId}
     * @allow (create) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can create an avatar.
     * @allow (update) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can update their avatar.
     * @allow (get) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can get their avatar.
     * @allow (list) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can list their avatars.
     * @deny (create) User with ID 'mismatchedId' cannot create an avatar with userId 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2'.
     * @deny (update) User with ID 'mismatchedId' cannot update avatar with userId 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2'.
     * @principle Enforces document ownership for writes, and allows owner to list their own documents.
     */
    match /users/{userId}/avatars/{avatarId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to garment data. Garments are globally readable.
     * @path /garments/{garmentId}
     * @allow (get) Any user can get garment data.
     * @allow (list) Any user can list garments.
     * @deny (create) No user can create garments. // TODO: Add admin role check if needed
     * @deny (update) No user can update garments. // TODO: Add admin role check if needed
     * @deny (delete) No user can delete garments. // TODO: Add admin role check if needed
     * @principle Garments are globally readable.
     */
    match /garments/{garmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to size chart data. Size charts are globally readable.
     * @path /sizeCharts/{sizeChartId}
     * @allow (get) Any user can get size chart data.
     * @allow (list) Any user can list size charts.
     * @deny (create) No user can create size charts. // TODO: Add admin role check if needed
     * @deny (update) No user can update size charts. // TODO: Add admin role check if needed
     * @deny (delete) No user can delete size charts. // TODO: Add admin role check if needed
     * @principle Size charts are globally readable.
     */
    match /sizeCharts/{sizeChartId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to virtual try-on session data for a specific user.
     * @path /users/{userId}/virtualTryOnSessions/{virtualTryOnSessionId}
     * @allow (create) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can create a try-on session.
     * @allow (update) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can update their try-on session.
     * @allow (get) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can get their try-on session.
     * @allow (list) User with ID 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2' can list their try-on sessions.
     * @deny (create) User with ID 'mismatchedId' cannot create a try-on session with userId 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2'.
     * @deny (update) User with ID 'mismatchedId' cannot update try-on session with userId 'n2UvcJzQhxdYbzZUTmEgdEhUp2d2'.
     * @principle Enforces document ownership for writes, and allows owner to list their own documents.
     */
    match /users/{userId}/virtualTryOnSessions/{virtualTryOnSessionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}