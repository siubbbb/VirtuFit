/**
 * @file Firestore Security Rules for VirtuFit Application
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user-generated data (profiles, body measurements, avatars, and fit recommendations). Public read access is not granted for any collection.
 * @dataStructure User data is nested under /users/{userId}, with subcollections for bodyMeasurements, avatars, and fitRecommendations. Garments and SizeCharts are stored in top-level collections.
 * @keySecurityDecisions All user-specific data requires the user to be authenticated and to own the data. Listing of user profiles is forbidden.
 * @denormalizationForAuthorization The 'userId' field is denormalized into BodyMeasurement, Avatar, and FitRecommendation documents to avoid costly `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can access their own profile if the userId matches their auth UID.
     * @deny (list) - Listing all user profiles is not allowed.
     * @deny (create) - Unauthenticated users cannot create user profiles.
     * @deny (update, delete) - Unauthenticated users cannot modify user profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the resource
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the resource
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to body measurement documents within a user's profile.
     * @path /users/{userId}/bodyMeasurements/{bodyMeasurementId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own body measurements.
     * @deny (create, get, list, update, delete) - Other users cannot access or modify another user's body measurements.
     * @principle Restricts access to a user's own body measurement data.
     */
    match /users/{userId}/bodyMeasurements/{bodyMeasurementId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the resource
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the resource
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to avatar documents within a user's profile.
     * @path /users/{userId}/avatars/{avatarId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own avatars.
     * @deny (create, get, list, update, delete) - Other users cannot access or modify another user's avatars.
     * @principle Restricts access to a user's own avatar data.
     */
    match /users/{userId}/avatars/{avatarId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the resource
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the resource
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to fit recommendation documents within a user's profile.
     * @path /users/{userId}/fitRecommendations/{fitRecommendationId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own fit recommendations.
     * @deny (create, get, list, update, delete) - Other users cannot access or modify another user's fit recommendations.
     * @principle Restricts access to a user's own fit recommendation data.
     */
    match /users/{userId}/fitRecommendations/{fitRecommendationId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the resource
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the resource
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to garment documents. Garments are treated as public read-only, with no write access in this prototype.
     * @path /garments/{garmentId}
     * @allow (get, list) - Any user can view garment information.
     * @deny (create, update, delete) - No one can create, update, or delete garments.
     * @principle Garments are publicly readable but not writable.
     */
    match /garments/{garmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to size chart documents. Size charts are treated as public read-only, with no write access in this prototype.
     * @path /sizeCharts/{sizeChartId}
     * @allow (get, list) - Any user can view size chart information.
     * @deny (create, update, delete) - No one can create, update, or delete size charts.
     * @principle Size charts are publicly readable but not writable.
     */
    match /sizeCharts/{sizeChartId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}