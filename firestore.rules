/**
 * @fileoverview Firestore Security Rules for VirtuFit.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, body measurements, avatars, and virtual try-on sessions.
 * Garments and size charts are publicly accessible.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with subcollections for body measurements, avatars, and try-on sessions.
 * - /garments/{garmentId}: Stores garment data.
 * - /sizeCharts/{sizeChartId}: Stores size chart data.
 *
 * Key Security Decisions:
 * - User data (profiles, measurements, avatars, sessions) is strictly controlled by user ownership.
 * - Garments and size charts are publicly readable, but write access is not defined (and thus implicitly denied).
 * - Listing of user documents is allowed only to the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile.
     *           Request: { "auth": { "uid": "user123" }, "resource": { "data": { "id": "user123", "email": "test@example.com", "displayName": "Test User" } } }
     * @allow (get, list, update, delete) - User with ID 'user123' can read their profile.
     *           Request: { "auth": { "uid": "user123" } }
     * @deny (create) - User with ID 'user456' cannot create a profile with ID 'user123'.
     *           Request: { "auth": { "uid": "user456" }, "resource": { "data": { "id": "user123", "email": "test@example.com", "displayName": "Test User" } } }
     * @deny (update, delete) - User with ID 'user456' cannot update/delete the profile of 'user123'.
     *           Request: { "auth": { "uid": "user456" } }
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to body measurement documents for a specific user.
     * @path /users/{userId}/bodyMeasurements/{bodyMeasurementId}
     * @allow (create) - User with ID 'user123' can create a body measurement for themselves.
     *           Request: { "auth": { "uid": "user123" }, "resource": { "data": { "userId": "user123", "measurementDate": "2024-01-01T00:00:00Z" } } }
     * @allow (get, list, update, delete) - User with ID 'user123' can read their body measurements.
     *           Request: { "auth": { "uid": "user123" } }
     * @deny (create) - User with ID 'user456' cannot create a body measurement for 'user123'.
     *           Request: { "auth": { "uid": "user456" }, "resource": { "data": { "userId": "user123", "measurementDate": "2024-01-01T00:00:00Z" } } }
     * @deny (update, delete) - User with ID 'user456' cannot update/delete body measurements of 'user123'.
     *           Request: { "auth": { "uid": "user456" } }
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/bodyMeasurements/{bodyMeasurementId} {
      // Helper function to check if the authenticated user is the owner of the parent user document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the parent user document for existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to avatar documents for a specific user.
     * @path /users/{userId}/avatars/{avatarId}
     * @allow (create) - User with ID 'user123' can create an avatar for themselves.
     *           Request: { "auth": { "uid": "user123" }, "resource": { "data": { "userId": "user123", "avatarUrl": "https://example.com/avatar.png" } } }
     * @allow (get, list, update, delete) - User with ID 'user123' can read their avatars.
     *           Request: { "auth": { "uid": "user123" } }
     * @deny (create) - User with ID 'user456' cannot create an avatar for 'user123'.
     *           Request: { "auth": { "uid": "user456" }, "resource": { "data": { "userId": "user123", "avatarUrl": "https://example.com/avatar.png" } } }
     * @deny (update, delete) - User with ID 'user456' cannot update/delete avatars of 'user123'.
     *           Request: { "auth": { "uid": "user456" } }
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/avatars/{avatarId} {
      // Helper function to check if the authenticated user is the owner of the parent user document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the parent user document for existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to garment documents. Garments are publicly readable, but write access is not defined (and thus implicitly denied).
     * @path /garments/{garmentId}
     * @allow (get, list) - Any user can read garment information.
     *           Request: { "auth": { "uid": "anyuser" } }
     * @deny (create, update, delete) - No user can create/update/delete garments.
     *           Request: { "auth": { "uid": "anyuser" } }
     * @principle Allows public read access for garment data.
     */
    match /garments/{garmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to size chart documents. Size charts are publicly readable, but write access is not defined (and thus implicitly denied).
     * @path /sizeCharts/{sizeChartId}
     * @allow (get, list) - Any user can read size chart information.
     *           Request: { "auth": { "uid": "anyuser" } }
     * @deny (create, update, delete) - No user can create/update/delete size charts.
     *           Request: { "auth": { "uid": "anyuser" } }
     * @principle Allows public read access for size chart data.
     */
    match /sizeCharts/{sizeChartId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to virtual try-on session documents for a specific user.
     * @path /users/{userId}/virtualTryOnSessions/{virtualTryOnSessionId}
     * @allow (create) - User with ID 'user123' can create a try-on session for themselves.
     *           Request: { "auth": { "uid": "user123" }, "resource": { "data": { "userId": "user123", "garmentId": "garment456", "selectedSize": "M", "tryOnDate": "2024-01-02T00:00:00Z" } } }
     * @allow (get, list, update, delete) - User with ID 'user123' can read their try-on sessions.
     *           Request: { "auth": { "uid": "user123" } }
     * @deny (create) - User with ID 'user456' cannot create a try-on session for 'user123'.
     *           Request: { "auth": { "uid": "user456" }, "resource": { "data": { "userId": "user123", "garmentId": "garment456", "selectedSize": "M", "tryOnDate": "2024-01-02T00:00:00Z" } } }
     * @deny (update, delete) - User with ID 'user456' cannot update/delete try-on sessions of 'user123'.
     *           Request: { "auth": { "uid": "user456" } }
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/virtualTryOnSessions/{virtualTryOnSessionId} {
      // Helper function to check if the authenticated user is the owner of the parent user document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the parent user document for existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}